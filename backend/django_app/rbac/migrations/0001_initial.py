# Generated by Django 5.2.4 on 2025-09-19 07:32

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FeatureFlag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='기능 플래그 키', max_length=100, unique=True)),
                ('enabled', models.BooleanField(default=False, help_text='전역 활성화 여부')),
                ('desc', models.CharField(blank=True, help_text='설명', max_length=200)),
            ],
            options={
                'verbose_name': '기능 플래그',
                'db_table': 'rbac_feature_flag',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='그룹/회사 명', max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='회사 식별 slug (예: gbt 등)', max_length=120, unique=True)),
                ('desc', models.CharField(blank=True, help_text='설명', max_length=200)),
            ],
            options={
                'verbose_name': '그룹 (조직 단위)',
                'verbose_name_plural': '그룹 (조직 단위)',
                'db_table': 'rbac_group',
                'indexes': [models.Index(fields=['name'], name='idx_rbac_group_name'), models.Index(fields=['slug'], name='idx_rbac_group_slug')],
            },
        ),
        migrations.CreateModel(
            name='Scope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text="스코프 키 (예: 'entry.read', 'user.manage','group.gbt')", max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly 식별자 (검색/링크 최적화)', max_length=120, unique=True)),
                ('kind', models.CharField(choices=[('feature', 'KIND_FEATURE'), ('group', 'KIND_GROUP')], default='feature', help_text="스코프 종류: 'feature(기능)','group(회사라벨)'", max_length=20)),
                ('desc', models.CharField(blank=True, help_text='설명', max_length=200)),
            ],
            options={
                'verbose_name': '스코프(세부 권한)',
                'verbose_name_plural': '스코프(세부 권한)',
                'db_table': 'rbac_scope',
                'indexes': [models.Index(fields=['slug'], name='idx_scope_slug'), models.Index(fields=['kind'], name='idx_scope_kind')],
            },
        ),
        migrations.CreateModel(
            name='GroupFeatureFlag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, help_text='이 그룹에서 사용할지 여부(전역값보다 우선순위)')),
                ('rollout_percent', models.PositiveIntegerField(default=100, help_text='이 그룹 내 사용자 중 활성화 비율(0~100)')),
                ('starts_at', models.DateTimeField(blank=True, null=True)),
                ('ends_at', models.DateTimeField(blank=True, null=True)),
                ('note', models.CharField(blank=True, help_text='메모', max_length=200)),
                ('flag', models.ForeignKey(help_text='전역기능플래그', on_delete=django.db.models.deletion.CASCADE, related_name='group_overrides', to='rbac.featureflag')),
                ('group', models.ForeignKey(help_text='대상 그룹', on_delete=django.db.models.deletion.CASCADE, related_name='feature_flags', to='rbac.group')),
            ],
            options={
                'db_table': 'rbac_group_feature_flag',
                'indexes': [models.Index(fields=['group'], name='idx_gff_group'), models.Index(fields=['flag'], name='idx_gff_flag')],
                'constraints': [models.UniqueConstraint(fields=('group', 'flag'), name='uniq_group_flag_override'), models.CheckConstraint(condition=models.Q(('rollout_percent__gte', 0), ('rollout_percent__lte', 100)), name='ck_rollout_percent_range')],
            },
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_in_group', models.CharField(choices=[('member', 'Member'), ('owner', 'Owner'), ('admin', 'Admin')], default='member', help_text='그룹 내 역할 (member < owner < admin)', max_length=10)),
                ('is_default', models.BooleanField(default=False, help_text='기본 진입 그룹 여부')),
                ('group', models.ForeignKey(help_text='그룹', on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='rbac.group')),
                ('user', models.ForeignKey(help_text='사용자', on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '그룹 소속(멤버십)',
                'db_table': 'rbac_group_membership',
                'indexes': [models.Index(fields=['user'], name='idx_rgm_user'), models.Index(fields=['group'], name='idx_rgm_group')],
                'constraints': [models.UniqueConstraint(fields=('user', 'group'), name='uniq_rgm_user_group'), models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('user',), name='uniq_rgm_default_per_user')],
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('item', 'Item (link)'), ('group', 'Group (header)')], default='item', help_text='링크 메뉴인지/그룹 헤더인지', max_length=10, verbose_name='메뉴 타입')),
                ('label', models.CharField(help_text='표시 이름', max_length=50, verbose_name='메뉴명')),
                ('path', models.CharField(blank=True, help_text='내부경로, 그룹타입은 비움(그룹명에만 쓰이고 path가 없어서)', max_length=200, verbose_name='경로')),
                ('order', models.IntegerField(default=0, verbose_name='정렬 순서')),
                ('external', models.BooleanField(default=False, verbose_name='외부 링크')),
                ('external_url', models.URLField(blank=True, verbose_name='외부 링크 URL')),
                ('desc', models.CharField(blank=True, max_length=200, verbose_name='설명')),
                ('enabled', models.BooleanField(default=True, verbose_name='사용 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('feature_flag', models.ForeignKey(blank=True, help_text='ON일 때만 노출, 회사별 오버라이드는 GroupFeatureFlag를 서비스에서 적용', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='menus', to='rbac.featureflag', verbose_name='가상 플래그')),
                ('parent', models.ForeignKey(blank=True, help_text='최상위면 비움. 하위는 부모 지정', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='rbac.menuitem', verbose_name='상위 메뉴')),
                ('required_any', models.ManyToManyField(blank=True, help_text='비우면 권한 제한 없음. 회사 전용은 "group.{slug}"를 추가', related_name='menus_any', to='rbac.scope', verbose_name='필요 스코프(OR)')),
            ],
            options={
                'verbose_name': '메뉴',
                'db_table': 'menu_item',
                'ordering': ['parent_id', 'order', 'id'],
                'indexes': [models.Index(fields=['parent', 'order'], name='idx_menu_parent_order'), models.Index(fields=['feature_flag'], name='idx_menu_feature_flag')],
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('kind', 'group'), _negated=True), ('path', ''), _connector='OR'), name='menu_group_path_blank'), models.CheckConstraint(condition=models.Q(models.Q(('kind', 'group'), _negated=True), ('external', False), _connector='OR'), name='menu_group_external_false'), models.CheckConstraint(condition=models.Q(models.Q(('kind', 'item'), ('external', True), _negated=True), models.Q(('external_url', ''), _negated=True), _connector='OR'), name='menu_item_ext_url_required'), models.CheckConstraint(condition=models.Q(models.Q(('kind', 'item'), ('external', True), _negated=True), ('path', ''), _connector='OR'), name='menu_item_ext_path_blank'), models.CheckConstraint(condition=models.Q(models.Q(('kind', 'item'), ('external', False), _negated=True), models.Q(('path', ''), _negated=True), _connector='OR'), name='menu_item_path_required_when_internal'), models.CheckConstraint(condition=models.Q(models.Q(('kind', 'item'), ('external', False), _negated=True), ('external_url', ''), _connector='OR'), name='menu_item_internal_exturl_blank'), models.UniqueConstraint(fields=('parent', 'label'), name='uniq_menu_parent_label'), models.UniqueConstraint(condition=models.Q(('parent__isnull', True)), fields=('label',), name='uniq_menu_root_label')],
            },
        ),
        migrations.CreateModel(
            name='GroupRoleScope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('owner', 'Owner'), ('admin', 'Admin')], default='member', help_text='이 역할 이상에 부여 (서비스 레이어에서 상속)', max_length=10)),
                ('is_active', models.BooleanField(default=True, help_text='OFF면 임시 비활성화 (서비스 레이어는 True만 반영)')),
                ('desc', models.CharField(blank=True, help_text='부여 사유/메모', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('granted_by', models.ForeignKey(blank=True, help_text='권한을 부여한 운영자(선택)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group_role_scope_grants', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(help_text='스코프를 부여하는 그룹', on_delete=django.db.models.deletion.CASCADE, related_name='role_scopes', to='rbac.group')),
                ('scope', models.ForeignKey(help_text="연결한 스코프(kind='feature')", on_delete=django.db.models.deletion.CASCADE, related_name='granted_to_group_roles', to='rbac.scope')),
            ],
            options={
                'db_table': 'rbac_group_role_scope',
                'indexes': [models.Index(fields=['group', 'role'], name='idx_rgrs_group_role'), models.Index(fields=['is_active'], name='idx_rgrs_active')],
                'constraints': [models.UniqueConstraint(fields=('group', 'role', 'scope'), name='uniq_rgrs_triple')],
            },
        ),
    ]
