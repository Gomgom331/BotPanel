# Generated by Django 5.2.4 on 2025-09-15 04:16

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FeatureFlag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='기능 플래그 키', max_length=100, unique=True)),
                ('enabled', models.BooleanField(default=False, help_text='활성화 여부')),
                ('desc', models.CharField(blank=True, help_text='기능 설명', max_length=200)),
            ],
            options={
                'verbose_name': '기능 플래그',
                'db_table': 'rbac_feature_flag',
            },
        ),
        migrations.CreateModel(
            name='Scope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='권한 스코프의 고유 키', max_length=100, unique=True)),
                ('desc', models.CharField(blank=True, help_text='권한 설명', max_length=200)),
            ],
            options={
                'verbose_name': '스코프(세부 권한)',
                'verbose_name_plural': '스코프(세부권한)',
                'db_table': 'rbac_scope',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='그룹이름', max_length=100, unique=True)),
                ('desc', models.CharField(blank=True, help_text='그룹내 설명', max_length=200)),
            ],
            options={
                'verbose_name': '그룹 (조직 단위)',
                'verbose_name_plural': '그룹 (조직 단위)',
                'db_table': 'rbac_group',
                'indexes': [models.Index(fields=['name'], name='idx_rbac_group_name')],
            },
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_in_group', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Admin'), ('member', 'Member')], default='member', help_text='그룹 내 역할 (Owner, Admin, Member)', max_length=10)),
                ('group', models.ForeignKey(help_text='그룹', on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='rbac.group')),
                ('user', models.ForeignKey(help_text='사용자', on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '그룹 소속(멤버십)',
                'db_table': 'rbac_group_membership',
                'indexes': [models.Index(fields=['user'], name='idx_rgm_user'), models.Index(fields=['group'], name='idx_rgm_group')],
                'unique_together': {('user', 'group')},
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('item', 'Item (link)'), ('group', 'Group (header)')], default='item', help_text='실제 링크 메뉴인지 , 그룹 헤더인지 구분하기', max_length=10, verbose_name='메뉴 타입')),
                ('label', models.CharField(help_text='사이드바/탑바 등에 보일 이름', max_length=50, verbose_name='메뉴명')),
                ('path', models.CharField(blank=True, help_text='메뉴 이름 클릭시 이동할 경로(예: /entries, /llm). 상위/하위 관계와 무관하게 절대경로 추천 kind=item 일 대만 사용하고 group 일떄는 값 비워두기', max_length=200, verbose_name='경로')),
                ('order', models.IntegerField(default=0, help_text='형제들 사이의 순서 (값이 작을수록 위)', verbose_name='정렬 순서')),
                ('external', models.BooleanField(default=False, help_text='외부 URL로 이동하는 메뉴인지', verbose_name='외부 링크')),
                ('external_url', models.URLField(blank=True, help_text='external=True일 때 이동할 주소(예: https://www.example.com)', verbose_name='외부 링크 URL')),
                ('desc', models.CharField(blank=True, help_text='메뉴 목적/대상자 설명(선택, 로직 영향 X).', max_length=200, verbose_name='설명')),
                ('enabled', models.BooleanField(default=True, verbose_name='사용 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('feature_flag', models.ForeignKey(blank=True, help_text='ON일 때만 메뉴 노출 (비우면 항상 노출)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='menus', to='rbac.featureflag', verbose_name='기능 플래그')),
                ('parent', models.ForeignKey(blank=True, help_text='최상위 메뉴면 비워둠. 하위 메뉴는 여기에 부모를 지정', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='rbac.menuitem', verbose_name='상위 메뉴')),
                ('required_any', models.ManyToManyField(blank=True, help_text='비우면 누구나 접근가능(권한 제한 없음)', related_name='menus_any', to='rbac.scope', verbose_name='필요 스코프')),
            ],
            options={
                'verbose_name': '메뉴',
                'db_table': 'menu_item',
                'ordering': ['parent_id', 'order', 'id'],
                'indexes': [models.Index(fields=['parent', 'order'], name='idx_menu_parent_order'), models.Index(fields=['feature_flag'], name='idx_menu_feature_flag')],
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('kind', 'group'), _negated=True), ('path', ''), _connector='OR'), name='menu_group_path_blank'), models.CheckConstraint(condition=models.Q(models.Q(('kind', 'group'), _negated=True), ('external', False), _connector='OR'), name='menu_group_external_false'), models.CheckConstraint(condition=models.Q(models.Q(('kind', 'item'), ('external', True), _negated=True), models.Q(('external_url', ''), _negated=True), _connector='OR'), name='menu_item_ext_url_required'), models.CheckConstraint(condition=models.Q(models.Q(('kind', 'item'), ('external', True), _negated=True), ('path', ''), _connector='OR'), name='menu_item_ext_path_blank'), models.CheckConstraint(condition=models.Q(models.Q(('kind', 'item'), ('external', False), _negated=True), models.Q(('path', ''), _negated=True), _connector='OR'), name='menu_item_path_required_when_internal'), models.CheckConstraint(condition=models.Q(models.Q(('kind', 'item'), ('external', False), _negated=True), ('external_url', ''), _connector='OR'), name='menu_item_internal_exturl_blank'), models.UniqueConstraint(fields=('parent', 'label'), name='uniq_menu_parent_label'), models.UniqueConstraint(condition=models.Q(('parent__isnull', True)), fields=('label',), name='uniq_menu_root_label')],
            },
        ),
        migrations.CreateModel(
            name='GroupScope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(help_text='그룹', on_delete=django.db.models.deletion.CASCADE, to='rbac.group')),
                ('scope', models.ForeignKey(help_text='스코프', on_delete=django.db.models.deletion.CASCADE, to='rbac.scope')),
            ],
            options={
                'verbose_name': '그룹-스코프 연결',
                'db_table': 'rbac_group_scope',
                'indexes': [models.Index(fields=['group', 'scope'], name='idx_rbac_group_scope')],
                'unique_together': {('group', 'scope')},
            },
        ),
    ]
