services:
  # 목적 실시간 코드 동기화 + DB 데이터 지속성
  db:
    image: postgres:15
    container_name: postgresql_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - purgo_net
  django:
    platform: linux/amd64        # Mac M1 대응
    build:
      context: ./backend/django_app
    ports:
      - "8000:8000"
    volumes:
      - ./backend/django_app:/app
    working_dir: /app
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"
    environment:
      - ENV=development 
    container_name: django_app
    networks:
      - purgo_net
    depends_on:           # 의존성 관리
      - db

  fastapi:
    platform: linux/amd64        # Mac M1 대응
    build:
      context: ./backend/fastapi_app
    ports:
      - "9000:9000"
    volumes:
      - ./backend/fastapi_app:/app
      - ./backend/django_app:/app/django_app
    working_dir: /app
    command: 
      sh -c "uvicorn main:app --host 0.0.0.0 --port 9000 --reload"
    environment:
      - ENV=development 
    depends_on:               # 의존성 관리
      - db
      - django
    container_name: fastapi_app
    networks:
      - purgo_net

  react:
    platform: linux/amd64        # Mac M1 대응
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Docker 컨테이너 내의 node_modules 폴더를 보호
      - ./frontend/.env.dev:/app/.env.dev # .env 로 마운트해서 적용
    working_dir: /app
    environment:
      - ENV=development
    command: npm start
    container_name: react_app
    networks:
      - purgo_net

networks:
  purgo_net:
    driver: bridge
volumes:
  # 설정을 해줘야 데이터를 저장해줌
  db_data: