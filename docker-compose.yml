# services:
#   frontend:
#     build: ./frontend
#     ports:
#       - "3000:3000"
#     volumes:
#       - ./frontend:/app
#     working_dir: /app
#     command: npm start

#   backend:
#     build: ./backend/django_app
#     ports:
#       - "8000:8000"
#     volumes:
#       - ./backend/django_app:/app
#     working_dir: /app
#     command: >
#       sh -c "python manage.py runserver 8000"

#   fastapi:
#     build: ./backend/fastapi_app
#     ports:
#       - "9000:9000"
#     volumes:
#       - ./backend/fastapi_app:/app
#     working_dir: /app
#     command: >
#       sh -c "uvicorn main:app --port 9000 --reload"
#     environment:
#       - ENV=development

services:
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    working_dir: /app
    command: npm start

  backend:
    build: ./backend/django_app
    ports:
      - "8000:8000"
    volumes:
      - ./backend/django_app:/app
    working_dir: /app
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"
    env_file:
      - ./backend/django_app/.env
    container_name: django_app

  fastapi:
    build: ./backend/fastapi_app
    ports:
      - "9000:9000"
    volumes:
      - ./backend/fastapi_app:/app
      - ./backend/django_app:/app/django_app  # ✅ FastAPI에서 Django 접근 경로 일치
    working_dir: /app
    command: >
      sh -c "uvicorn main:app --host 0.0.0.0 --port 9000 --reload"
    env_file:
      - ./backend/fastapi_app/.env  # 명시적으로 환경파일 지정
    depends_on:
      - backend
    container_name: fastapi_app